module HTLC.Test where

import qualified DA.Map as Map
import qualified DA.Optional as O
import qualified DA.Set as Set
import qualified DA.Time as T
import qualified DA.Text as TX
import qualified Daml.Finance.Account.Account as Account
import qualified Daml.Finance.Interface.Account.Account as Account
import qualified Daml.Finance.Interface.Account.Factory as AccountFactory
import qualified Daml.Finance.Interface.Holding.Base as Holding
import qualified Daml.Finance.Interface.Holding.Transferable as Transferable 
import Daml.Finance.Interface.Types.Common.Types
import qualified Daml.Finance.Interface.Util.Disclosure as Disclosure
import qualified Daml.Finance.Holding.Fungible as Fungible
import Daml.Script
import HTLC

data TestParties = TestParties
  with
    alice : Party
    bob : Party
    depository : Party
    issuer : Party
    custodian : Party
  deriving (Show, Eq)

data TestData = TestData
  with
    parties : TestParties
    transferableCid : ContractId Transferable.I -- Alice's holding
    aliceAccount : AccountKey
    bobAccount : AccountKey
    unlockTime : Time
  deriving (Show, Eq)

withSetup : (TestData -> Script a) -> Script ()
withSetup test = do
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"
  depository <- allocateParty "depository"
  issuer <- allocateParty "issuer"
  custodian <- allocateParty "custodian"
  let allParties = Set.fromList [alice, bob, depository, issuer, custodian]
      aliceAccount = AccountKey with
        custodian
        owner = alice
        id = Id "Alice@custodian"
      bobAccount = AccountKey with
        custodian
        owner = bob
        id = Id "Bob@custodian"
  holdingFactoryCid <- submit issuer $
    createCmd Fungible.Factory with
      provider = issuer
      observers = Map.fromList [("HTLC", allParties)]
  accountFactoryCid <- submit depository $
    createCmd Account.Factory with
      provider = depository
      observers = Map.fromList [("HTLC", allParties)]
  aliceAccountCid <- submitMulti [alice, custodian] [] $
    exerciseCmd @AccountFactory.F (toInterfaceContractId accountFactoryCid) AccountFactory.Create with
      account = aliceAccount
      holdingFactoryCid = toInterfaceContractId holdingFactoryCid
      controllers = Account.Controllers with
        outgoing = Set.empty
        incoming = Set.empty
      description = "Alice's account"
      observers = Map.fromList [("HTLC", allParties)]
  submitMulti [bob, custodian] [] $
    exerciseCmd @AccountFactory.F (toInterfaceContractId accountFactoryCid) AccountFactory.Create with
      account = bobAccount
      holdingFactoryCid = toInterfaceContractId holdingFactoryCid
      controllers = Account.Controllers with
        outgoing = Set.empty
        incoming = Set.empty
      description = "Alice's account"
      observers = Map.fromList [("HTLC", allParties)]
  holdingCid <- submit custodian $
    exerciseCmd aliceAccountCid Account.Credit with
      quantity = Quantity with
        unit = InstrumentKey with
          depository
          issuer
          id = Id "fungible1"
          version = "0"
        amount = 1.0
  holdingWithObserversCid <- submit alice $
    exerciseCmd @Disclosure.I (toInterfaceContractId holdingCid) Disclosure.AddObservers with
      disclosers = Set.fromList [alice]
      observersToAdd = ("HTLC", allParties)
  startTime <- getTime
  let unlockTime = T.addRelTime startTime (T.days 1)
  test $ TestData with
    parties = TestParties with alice, bob, depository, issuer, custodian
    transferableCid = coerceInterfaceContractId holdingWithObserversCid
    aliceAccount
    bobAccount
    unlockTime
  pure ()

test_HTLC_multisig : Script ()
test_HTLC_multisig = withSetup $ \testData -> do
  submitMustFail testData.parties.alice do
    createCmd HTLC with
      sender = testData.parties.alice
      receiverAccount = testData.bobAccount
      holdingCid = testData.transferableCid
      hash = "hash"
      unlockTime = testData.unlockTime

test_HTLC_accept_holding_validation : Script ()
test_HTLC_accept_holding_validation = withSetup $ \testData -> do
  -- Holding is not owned by the sender
  proposalCid <- submit testData.parties.bob $ createCmd HTLCProposal with
    sender = testData.parties.bob
    senderEthAddress = "..."
    receiver = testData.parties.alice
    ethTokenAddress = "..."
    ethTokenQuantity = "..."
    holdingCid = testData.transferableCid
    hash = "..."
    unlockTime = testData.unlockTime
  submitMustFail testData.parties.alice $ exerciseCmd proposalCid HTLCProposal_Accept with
    receiverAccount = testData.aliceAccount

test_HTLC_locking : Script ()
test_HTLC_locking = withSetup $ \testData -> do
  proposalCid <- submit testData.parties.alice $ createCmd HTLCProposal with
    sender = testData.parties.alice
    senderEthAddress = "..."
    receiver = testData.parties.bob
    ethTokenAddress = "..."
    ethTokenQuantity = "..."
    holdingCid = testData.transferableCid
    hash = "..."
    unlockTime = testData.unlockTime
  htlcCid <- submit testData.parties.bob $ exerciseCmd proposalCid HTLCProposal_Accept with
    receiverAccount = testData.bobAccount
  originalTransferable <- queryContractId testData.parties.alice testData.transferableCid
  assertMsg "Original holding must be archived" (O.isNone originalTransferable)
  htlc <- O.fromSomeNote "HTLC contract must exist" <$> queryContractId testData.parties.alice htlcCid
  let newHoldingCid : ContractId Holding.I = toInterfaceContractId htlc.holdingCid
  newHolding : Holding.View <- O.fromSomeNote "New holding contract must exist" <$>
    queryInterfaceContractId testData.parties.alice newHoldingCid
  let lock = O.fromSomeNote "New holding contract must have lock" newHolding.lock
  assertMsg
    "Lockers must include all counter parties"
    (lock.lockers == Set.fromList [testData.parties.alice, testData.parties.bob])
  submitMustFail testData.parties.alice $ exerciseCmd htlc.holdingCid Transferable.Transfer with
    actors = Set.fromList [testData.parties.alice]
    newOwnerAccount = testData.bobAccount

test_HTLC_claiming : Script ()
test_HTLC_claiming = withSetup $ \testData -> do
  let preImage = "lorem ipsum"
  proposalCid <- submit testData.parties.alice $ createCmd HTLCProposal with
    sender = testData.parties.alice
    senderEthAddress = "..."
    receiver = testData.parties.bob
    ethTokenAddress = "..."
    ethTokenQuantity = "..."
    holdingCid = testData.transferableCid
    hash = TX.sha256 preImage
    unlockTime = testData.unlockTime
  htlcCid <- submit testData.parties.bob $ exerciseCmd proposalCid HTLCProposal_Accept with
    receiverAccount = testData.bobAccount
  setTime testData.unlockTime
  -- Cannot claim on/after the unlock time
  submitMustFail testData.parties.bob $ exerciseCmd htlcCid HTLC_Claim with preImage
  setTime (T.addRelTime testData.unlockTime (negate $ T.hours 1))
  -- Cannot claim without correct pre-image
  submitMustFail testData.parties.bob $ exerciseCmd htlcCid HTLC_Claim with preImage = "invalid"
  -- Other party cannot claim
  submitMustFail testData.parties.alice $ exerciseCmd htlcCid HTLC_Claim with preImage
  -- Can claim with valid pre-image
  transferedHoldingCid <- submit testData.parties.bob $ exerciseCmd htlcCid HTLC_Claim with preImage
  transferredHolding <- O.fromSomeNote "Transferred holding contract must exist" <$>
    queryInterfaceContractId @Holding.I testData.parties.custodian (toInterfaceContractId transferedHoldingCid)
  assertMsg "New owner must be the recipient" (transferredHolding.account.owner == testData.parties.bob)
  assertMsg "Transferred holding must not be locked" (O.isNone transferredHolding.lock)
  pure ()
